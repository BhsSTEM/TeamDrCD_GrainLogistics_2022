Index: app/src/main/java/com/example/teamdrcd_grainlogistics_2022/MapsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.teamdrcd_grainlogistics_2022;\r\n\r\nimport static java.lang.Thread.sleep;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.FragmentActivity;\r\n\r\nimport android.Manifest;\r\nimport android.content.Context;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.location.Location;\r\nimport android.location.LocationListener;\r\nimport android.location.LocationManager;\r\nimport android.location.LocationRequest;\r\nimport android.os.Bundle;\r\n\r\nimport com.google.android.gms.location.FusedLocationProviderClient;\r\nimport com.google.android.gms.location.LocationServices;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.BitmapDescriptor;\r\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.example.teamdrcd_grainlogistics_2022.databinding.ActivityMapsBinding;\r\nimport com.google.android.gms.tasks.CancellationToken;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.OnTokenCanceledListener;\r\n\r\n@SuppressWarnings(\"deprecation\")\r\npublic class MapsActivity extends FragmentActivity implements OnMapReadyCallback {\r\n\r\n    private FusedLocationProviderClient fusedLocationClient;\r\n    private GoogleMap mMap;\r\n    private ActivityMapsBinding binding;\r\n    //private sLocationRequest lr = new LocationRequest();\r\n    //lr.setPriority(100);\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        binding = ActivityMapsBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()\r\n                .findFragmentById(R.id.map);\r\n        mapFragment.getMapAsync(this);\r\n\r\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Manipulates the map once available.\r\n     * This callback is triggered when the map is ready to be used.\r\n     * This is where we can add markers or lines, add listeners or move the camera. In this case,\r\n     * we just add a marker near Sydney, Australia.\r\n     * If Google Play services is not installed on the device, the user will be prompted to install\r\n     * it inside the SupportMapFragment. This method will only be triggered once the user has\r\n     * installed Google Play services and returned to the app.\r\n     */\r\n    @Override\r\n    public void onMapReady(@NonNull GoogleMap googleMap) {\r\n        mMap = googleMap;\r\n\r\n        // Add a marker in Sydney and move the camera\r\n        LatLng quadcities = new LatLng(42, -90);\r\n        mMap.addMarker(new MarkerOptions().position(quadcities).title(\"Marker in Bettendorf\"));\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(quadcities));\r\n\r\n        LatLng Tractor1 = new LatLng(41.557579, -90.495911);\r\n        //mMap.addMarker(new MarkerOptions().position(Tractor1).title(\"Tractor #1\")\r\n                // below line is use to add custom marker on our map.\r\n        //        .icon(BitmapFromVector(getApplicationContext(), R.drawable.ic_baseline_agriculture_24)));\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(Tractor1));\r\n\r\n\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            //return;\r\n        }\r\n        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            // TODO: Consider calling\r\n            //    ActivityCompat#requestPermissions\r\n            // here to request the missing permissions, and then overriding\r\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n            //                                          int[] grantResults)\r\n            // to handle the case where the user grants the permission. See the documentation\r\n            // for ActivityCompat#requestPermissions for more details.\r\n            return;\r\n        }\r\n        CancellationToken ct = new CancellationToken() {\r\n            @NonNull\r\n            @Override\r\n            public CancellationToken onCanceledRequested(@NonNull OnTokenCanceledListener onTokenCanceledListener) {\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            public boolean isCancellationRequested() {\r\n                return false;\r\n            }\r\n        };\r\n        googleMap.setMyLocationEnabled(true);\r\n        //Location location = googleMap.getMyLocation();\r\n        fusedLocationClient.getCurrentLocation(100, ct)\r\n                .addOnSuccessListener(this, new OnSuccessListener<Location>() {\r\n                    @Override\r\n                    public void onSuccess(Location location) {\r\n                        // Got last known location. In some rare situations this can be null.\r\n                        if (location != null) {\r\n                            // Logic to handle location object\r\n                            mMap.addMarker(new MarkerOptions().position(new LatLng(location.getLatitude(), location.getLongitude())).title(\"You\")\r\n                                    // below line is use to add custom marker on our map.\r\n                                    .icon(BitmapFromVector(getApplicationContext(), R.drawable.ic_baseline_agriculture_24)));\r\n                            mMap.moveCamera(CameraUpdateFactory.newLatLng(new LatLng(location.getLatitude(), location.getLongitude())));\r\n\r\n                        } else {\r\n                            mMap.addMarker(new MarkerOptions().position(new LatLng(41.542670, -90.477620)).title(\"You\")\r\n                                    // below line is use to add custom marker on our map.\r\n                                    .icon(BitmapFromVector(getApplicationContext(), R.drawable.ic_baseline_agriculture_24)));\r\n                            mMap.moveCamera(CameraUpdateFactory.newLatLng(new LatLng(41.542670, -90.477620)));\r\n\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        CancellationToken ct = new CancellationToken() {\r\n            @NonNull\r\n            @Override\r\n            public CancellationToken onCanceledRequested(@NonNull OnTokenCanceledListener onTokenCanceledListener) {\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            public boolean isCancellationRequested() {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        //while (true)\r\n        {\r\n            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n                // TODO: Consider calling\r\n                //    ActivityCompat#requestPermissions\r\n                // here to request the missing permissions, and then overriding\r\n                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n                //                                          int[] grantResults)\r\n                // to handle the case where the user grants the permission. See the documentation\r\n                // for ActivityCompat#requestPermissions for more details.\r\n                return;\r\n            }\r\n\r\n            fusedLocationClient.getCurrentLocation(100, ct)\r\n                    .addOnSuccessListener(this, new OnSuccessListener<Location>() {\r\n                        @Override\r\n                        public void onSuccess(Location location) {\r\n                            // Got last known location. In some rare situations this can be null.\r\n                            if (location != null) {\r\n                                // Logic to handle location object\r\n                                mMap.addMarker(new MarkerOptions().position(new LatLng(location.getLatitude(), location.getLongitude())).title(\"You\")\r\n                                        // below line is use to add custom marker on our map.\r\n                                        .icon(BitmapFromVector(getApplicationContext(), R.drawable.ic_baseline_agriculture_24)));\r\n                                mMap.moveCamera(CameraUpdateFactory.newLatLng(new LatLng(location.getLatitude(), location.getLongitude())));\r\n\r\n                            } else {\r\n                                mMap.addMarker(new MarkerOptions().position(new LatLng(41.542670, -90.477620)).title(\"You\")\r\n                                        // below line is use to add custom marker on our map.\r\n                                        .icon(BitmapFromVector(getApplicationContext(), R.drawable.ic_baseline_agriculture_24)));\r\n                                mMap.moveCamera(CameraUpdateFactory.newLatLng(new LatLng(41.542670, -90.477620)));\r\n\r\n                            }\r\n                        }\r\n                    });\r\n            // Add a marker in Sydney and move the camera\r\n            try {\r\n                sleep(1000);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    private BitmapDescriptor BitmapFromVector(Context context, int vectorResId) {\r\n        // below line is use to generate a drawable.\r\n        Drawable vectorDrawable = ContextCompat.getDrawable(context, vectorResId);\r\n\r\n        // below line is use to set bounds to our vector drawable.\r\n        vectorDrawable.setBounds(0, 0, vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight());\r\n\r\n        // below line is use to create a bitmap for our\r\n        // drawable which we have added.\r\n        Bitmap bitmap = Bitmap.createBitmap(vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);\r\n\r\n        // below line is use to add bitmap in our canvas.\r\n        Canvas canvas = new Canvas(bitmap);\r\n\r\n        // below line is use to draw our\r\n        // vector drawable in canvas.\r\n        vectorDrawable.draw(canvas);\r\n\r\n        // after generating our bitmap we are returning our bitmap.\r\n        return BitmapDescriptorFactory.fromBitmap(bitmap);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/teamdrcd_grainlogistics_2022/MapsActivity.java b/app/src/main/java/com/example/teamdrcd_grainlogistics_2022/MapsActivity.java
--- a/app/src/main/java/com/example/teamdrcd_grainlogistics_2022/MapsActivity.java	
+++ b/app/src/main/java/com/example/teamdrcd_grainlogistics_2022/MapsActivity.java	
@@ -118,6 +118,10 @@
             }
         };
         googleMap.setMyLocationEnabled(true);
+        Location loc = new Location(googleMap.getMyLocation());
+        //LatLng locate = new LatLng(loc.getLatitude(),loc.getLongitude());
+        //mMap.addMarker(new MarkerOptions().position(locate).title("Current location"));
+        //mMap.moveCamera(CameraUpdateFactory.newLatLng(quadcities));
         //Location location = googleMap.getMyLocation();
         fusedLocationClient.getCurrentLocation(100, ct)
                 .addOnSuccessListener(this, new OnSuccessListener<Location>() {
